
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Zap, Search, FileText, MessageSquare, Lightbulb } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const AIContentGenerator = () => {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [prompt, setPrompt] = useState('');
  const [generatedContent, setGeneratedContent] = useState('');
  const [contentType, setContentType] = useState('business-plan');

  const contentTemplates = {
    'business-plan': 'Generate a comprehensive business plan outline for',
    'marketing-strategy': 'Create a digital marketing strategy for',
    'proposal': 'Write a professional service proposal for',
    'consultation': 'Provide expert consultation advice for',
    'analysis': 'Conduct a business analysis for'
  };

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      toast({
        title: "Input Required",
        description: "Please enter a description or topic to generate content.",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);
    
    try {
      // Simulate AI content generation with realistic delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const template = contentTemplates[contentType as keyof typeof contentTemplates];
      const mockContent = `# AI-Generated Content: ${template} "${prompt}"

## Executive Summary
Based on your requirements for "${prompt}", here's a comprehensive approach tailored to your specific needs.

## Key Recommendations
1. **Strategic Planning**: Develop a structured approach that aligns with your business objectives
2. **Implementation Timeline**: Create phased rollout plan with measurable milestones
3. **Resource Allocation**: Optimize budget and personnel for maximum ROI
4. **Risk Assessment**: Identify potential challenges and mitigation strategies

## Detailed Analysis
Your project "${prompt}" presents unique opportunities for growth and optimization. Key areas to focus on include market positioning, competitive advantages, and scalable implementation strategies.

## Next Steps
1. Conduct detailed stakeholder analysis
2. Develop comprehensive project timeline
3. Establish KPIs and success metrics
4. Begin pilot implementation phase

## Expert Recommendations
Based on industry best practices and current market trends, we recommend a data-driven approach that prioritizes customer experience and operational efficiency.

*This content was generated by our AI assistant. For personalized consultation, please schedule a meeting with our expert team.*`;

      setGeneratedContent(mockContent);
      
      toast({
        title: "Content Generated",
        description: "AI-powered content has been created based on your input."
      });
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "Please try again or contact support.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSave = () => {
    if (!generatedContent) return;
    
    const blob = new Blob([generatedContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-generated-${contentType}-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Content Saved",
      description: "Your generated content has been downloaded as a file."
    });
  };

  return (
    <div className="space-y-6">
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-white">
            <Zap className="h-6 w-6 text-yellow-400" />
            AI Content Generator
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Tabs value={contentType} onValueChange={setContentType}>
            <TabsList className="grid grid-cols-5 bg-gray-700">
              <TabsTrigger value="business-plan" className="text-xs">Business Plan</TabsTrigger>
              <TabsTrigger value="marketing-strategy" className="text-xs">Marketing</TabsTrigger>
              <TabsTrigger value="proposal" className="text-xs">Proposal</TabsTrigger>
              <TabsTrigger value="consultation" className="text-xs">Consultation</TabsTrigger>
              <TabsTrigger value="analysis" className="text-xs">Analysis</TabsTrigger>
            </TabsList>
          </Tabs>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium text-gray-300 mb-2 block">
                Describe your project or requirements:
              </label>
              <Input
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                placeholder="e.g., a tech startup focused on sustainable energy solutions"
                className="bg-gray-700 border-gray-600 text-white"
              />
            </div>

            <Button 
              onClick={handleGenerate}
              disabled={isGenerating}
              className="w-full bg-gradient-to-r from-yellow-600 to-orange-600 hover:from-yellow-700 hover:to-orange-700"
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Generating Content...
                </>
              ) : (
                <>
                  <Lightbulb className="h-4 w-4 mr-2" />
                  Generate AI Content
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {generatedContent && (
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle className="flex items-center gap-2 text-white">
              <FileText className="h-5 w-5 text-green-400" />
              Generated Content
            </CardTitle>
            <div className="flex gap-2">
              <Badge variant="secondary" className="bg-green-600/20 text-green-400">
                AI Generated
              </Badge>
              <Button onClick={handleSave} size="sm" variant="outline">
                Save as File
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <Textarea
              value={generatedContent}
              onChange={(e) => setGeneratedContent(e.target.value)}
              className="bg-gray-700 border-gray-600 text-white min-h-[400px] font-mono text-sm"
              placeholder="Generated content will appear here..."
            />
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default AIContentGenerator;
